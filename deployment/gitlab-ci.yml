stages:
- build
- deploy_to_staging
- deploy_to_production

build:
    stage: build
    script:
    - nvm install $NodeVersion
    - nvm use $NodeVersion
    - yarn install --frozen-lockfile
    - ls -lah
    artifacts:
        name: "$SvcName-$CI_PIPELINE_ID"
        paths:
        - node_modules

staging:
    stage: deploy_to_staging
    when: manual
    environment:
        name: staging
    before_script:
    - bash deployment/utilities.sh SetAwsProfile
    - bash deployment/utilities.sh SetServerlessProfile
    script:
    - cp deployment/serverless.yml .
    - sls deploy --stage $AwsStage
    variables:
        AwsStage: "staging"
        REGION: "$AwsRegion"
        USERNAME: "$Username"
        HOST: "$Host"
        PEM_KEY: "$PemKey"
        S3_BUCKET: "$S3Bucket"
        UTILITIES_URL: "$UtilitiesUrl"
        ALARM_TOPIC: "$AlarmTopic_Stage"
        MYSQL_HOST: "$MysqlHost_Stage"
        MYSQL_USERNAME: "$MysqUsername_Stage"
        MYSQL_PASSWORD: "$MysqPassword_Stage"
        MYSQL_SCHEMA: "$MysqSchema_Stage"
        S3_ARCHIVE_BUCKET: "$S3ArchiveBucket_Stage"
        ARCHIVE_THRESHOLD_DAYS: "$ArchiveThresholdDays_Stage"

production:
    stage: deploy_to_production
    when: manual
    environment:
        name: production
    before_script:
    - bash deployment/utilities.sh SetAwsProfile
    - bash deployment/utilities.sh SetServerlessProfile
    script:
    - cp deployment/serverless.yml .
    - sls deploy --stage $AwsStage
    variables:
        AwsStage: "production"
        REGION: "$AwsRegion"
        USERNAME: "$Username"
        HOST: "$Host"
        PEM_KEY: "$PemKey"
        S3_BUCKET: "$S3Bucket"
        UTILITIES_URL: "$UtilitiesUrl"
        ALARM_TOPIC: "$AlarmTopic_Prod"
        MYSQL_HOST: "$MysqlHost_Prod"
        MYSQL_USERNAME: "$MysqUsername_Prod"
        MYSQL_PASSWORD: "$MysqPassword_Prod"
        MYSQL_SCHEMA: "$MysqSchema_Prod"
        S3_ARCHIVE_BUCKET: "$S3ArchiveBucket_Prod"
        ARCHIVE_THRESHOLD_DAYS: "$ArchiveThresholdDays_Prod"